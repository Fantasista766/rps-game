/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RockPaperScissorsInterface extends Interface {
  getFunction(
    nameOrSignature: "bot" | "play" | "player" | "supportsInterface" | "winner"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GameResult"): EventFragment;

  encodeFunctionData(functionFragment: "bot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "player", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
}

export namespace GameResultEvent {
  export type InputTuple = [
    player: AddressLike,
    playerMove: BigNumberish,
    botMove: BigNumberish,
    winner: AddressLike
  ];
  export type OutputTuple = [
    player: string,
    playerMove: bigint,
    botMove: bigint,
    winner: string
  ];
  export interface OutputObject {
    player: string;
    playerMove: bigint;
    botMove: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RockPaperScissors extends BaseContract {
  connect(runner?: ContractRunner | null): RockPaperScissors;
  waitForDeployment(): Promise<this>;

  interface: RockPaperScissorsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bot: TypedContractMethod<[], [string], "view">;

  play: TypedContractMethod<
    [_playerMove: BigNumberish, _botMove: BigNumberish],
    [void],
    "nonpayable"
  >;

  player: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  winner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "play"
  ): TypedContractMethod<
    [_playerMove: BigNumberish, _botMove: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "player"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "GameResult"
  ): TypedContractEvent<
    GameResultEvent.InputTuple,
    GameResultEvent.OutputTuple,
    GameResultEvent.OutputObject
  >;

  filters: {
    "GameResult(address,uint8,uint8,address)": TypedContractEvent<
      GameResultEvent.InputTuple,
      GameResultEvent.OutputTuple,
      GameResultEvent.OutputObject
    >;
    GameResult: TypedContractEvent<
      GameResultEvent.InputTuple,
      GameResultEvent.OutputTuple,
      GameResultEvent.OutputObject
    >;
  };
}
